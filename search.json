[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cod pentru lucrare de licență",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\nCode\ns1 &lt;- seq(.1001, .1009, .0001)\ns2 &lt;- seq(.101, .1491, .001)\ns3 &lt;- seq(.050, .9501, .050)\ns4 &lt;- seq(1, 4)\ns &lt;- c(s1,s2,s3,s4)\n\n\n\n\nCode\nnums &lt;- sort(c(.05, sum(s), sum(s)-.05, .05+s1, s1, sum(s)-s1, sum(s)-(.05+s1), seq(.1, .2, .001), seq(.2001, sum(s)-.2001, .0001), seq(sum(s)-.2, sum(s)-.1, .001)))\n\n\n\n\nCode\ndata &lt;- data.frame(\n  numar = nums\n)\ndata$combinatii &lt;- NA\ndata$nr_comb &lt;- NA\ndata$ok &lt;- NA\n\n\n\n\nCode\n# \n# write.csv(data, \"date_02.csv\")\n\n\n\n\nCode\n# data$combinatii[1]&lt;-0\n# which(data$numar==.1000)\n\n\n\n\nCode\ngauge &lt;- function(nr){\n  comb &lt;- vector()\n\n  n1 &lt;- round(nr*10000)%%10\n\n  if(n1!=0){\n    nr &lt;- nr-s1[n1]\n    comb &lt;- c(comb, s1[n1])\n    s1 &lt;- s1[-n1]\n  }\n  \n  n2 &lt;- round(nr*1000)%%50\n  if(n2!=0){\n    nr &lt;- nr-s2[round(n2)]\n    comb &lt;- c(comb, s2[n2])\n    s2 &lt;- s2[-n2]\n  }\n\n  n3 &lt;- round((round(nr*100)%%100)/5)\n\n  \n  if(n3!=0 && n3&lt;20){\n    nr &lt;- nr-s3[n3]\n    comb&lt;-c(comb, s3[n3])\n    s3 &lt;- s3[-n3]\n  }\n  \n  if(nr&gt;=10 | 10-nr&lt;10^(-5)){\n    comb &lt;- c(comb,s4)\n    nr &lt;- nr-10\n  } else {\n    \n    for (i in seq(1,4)){\n      if(nr&gt;=s4[5-i] | s4[5-i]-nr&lt;10^(-5)){\n        nr &lt;- nr-s4[5-i]\n        comb &lt;- c(comb, s4[5-i])\n      }\n    }\n  }\n\n  if(round(nr, digits=5)==0){\n    return(comb)\n  }\n  \n  if(nr&gt;=sum(s3) | sum(s3)-nr&lt;10^(-5)){\n    comb &lt;- c(comb,s3)\n    nr &lt;- nr-sum(s3)\n  } else {\n    while(nr&gt;10^(-5) && length(s3)!=0){\n      m3 &lt;- max(which(s3&lt;=nr+10^(-5)))\n      nr &lt;- nr-s3[m3]\n      if(nr&lt;s3[1] && nr&gt;10^(-5)){\n        nr &lt;- nr+s3[m3]\n        m3 &lt;- m3-1\n        nr &lt;- nr-s3[m3]\n      }\n      comb &lt;- c(comb,s3[m3])\n      s3 &lt;- s3[-m3]\n    }\n  }\n  # if(round(nr, digits=5)==0){\n  #   return(comb)\n  # }\n  # # print(nr)\n  # if(nr&lt;.4){\n  #   k = round(.4-nr, digits=5)\n  #   nr &lt;- nr+k\n  #   comb &lt;- comb[-which(comb==k)]\n  #   while(nr&gt;10^(-5) && length(s2)!=0){\n  #     m2 &lt;- max(which(s2&lt;=nr+10^(-5)))\n  #     # print(m2)\n  #     nr &lt;- nr-s2[m2]\n  #     # print(nr)\n  #     if(any(abs(comb-nr)&lt;10^(-5))){\n  #       # print('d')\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- m2-1\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     if(nr&lt;s2[1] && nr&gt;10^(-5)){\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- min(which(s2&lt;=nr+10^(-5)))\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     # print(nr)\n  #     comb &lt;- c(comb,s2[m2])\n  #     s2 &lt;- s2[-m2]\n  #   }\n  # } else {\n  #   while(nr&gt;10^(-5) && length(s2)!=0){\n  #     m2 &lt;- max(which(s2&lt;=nr+10^(-5)))\n  #     # print(m2)\n  #     nr &lt;- nr-s2[m2]\n  #     # print(nr)\n  #     if(nr&lt;s2[1] && nr&gt;10^(-5)){\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- min(which(s2&lt;=nr+10^(-5)))\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     # print(nr)\n  #     comb &lt;- c(comb,s2[m2])\n  #     s2 &lt;- s2[-m2]\n  #   }\n  # }\n    \n  # print(nr)\n  \n  if(round(nr, digits=5)==0){\n    return(comb)\n  }\n  \n  # for (i in seq(1,19)){\n  #   if((nr&gt;=s3[20-i] | s3[20-i]-nr&lt;10^(-5)) && any(s3[20-i]==comb)==FALSE){\n  #     nr &lt;- nr-s3[20-i]\n  #     comb &lt;- c(comb, s3[20-i])\n  #   }\n  # }\n  # for (i in seq(1,24)){\n  #   if(round(nr, digits=2)&gt;=.25 && (any(s2[i]==comb)==FALSE && any(s2[50-i]==comb)==FALSE)){\n  #     nr &lt;- nr-.25\n  #     comb &lt;- c(comb, s2[i], s2[50-i])\n  #   } else if(nr&gt;0 && nr&lt;=.25){\n  #     comb &lt;- comb[!comb==round(.25-nr, digits=2)]\n  #     nr &lt;- .25\n  #   }\n  # }\n  return(comb)\n}\n\n\n\n\nCode\n# p &lt;- sort(date2$numar)\n# rownames(date2) &lt;- NULL\n\n\n\n\nCode\n# p &lt;- sort(date2$numar)\n# rownames(date2) &lt;- NULL\n\n\n\n\nCode\ndate &lt;- read.csv(\"date_01.csv\")\ndate$ok &lt;- as.factor(date$ok)\n\n\n\n\nCode\n# date2 &lt;- date[which(date$ok!=0),]\n\n\n\n\nCode\n# test &lt;- data[1:20000,]\n# for(i in seq(1, length(date3$numar))){\n#   g = gauge(date3[i,2])\n#   date3$combinatii[i] &lt;- list(g)\n#   date3$nr_combinatii[i] &lt;- length(g)\n#   date3[i, 4] &lt;- round(date3[i, 2]-sum(g), digits=4)\n# }\n\n\n\n\nCode\n# date2$ok &lt;- as.factor(date2$ok)\n# date3 &lt;- date2[which(date2$ok!=0),]\n# rownames(date3) &lt;- NULL\n\n\n\n\nCode\n# data_str &lt;- apply(data,2,as.character)\n# write.csv(data_str, \"date_01.csv\")\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nggplot(date, aes(x = numar, y = nr_combinatii, col = ok)) + \n         geom_point(size=.1) +\n         labs(title = \"Nr si cate cale e nevoie \\n - colorare după precizie -\",\n              x = \"Nr\",\n              y = \"Nr cale\")\n\n\n\n\n\n\n\nCode\ndate_t &lt;- date\ndate_t$ok[as.numeric(as.character(date_t$ok))&gt;10^(-5)] &lt;- as.factor(1)\n\nggplot(date_t, aes(x = numar, y = nr_combinatii, col = ok)) + \n         geom_point(size=.1) +\n         labs(title = \"Vizualizarea numărului necesar de cale pentru fiecare mărime \\n - colorare după precizie -\",\n              x = \"Mărimea pe care vrem să o construim\",\n              y = \"Nr. de cale necesar\") +\n        scale_x_continuous(breaks = round(seq(min(date_t$numar), max(date_t$numar), by = 2),10)) +\n        scale_y_continuous(breaks = round(seq(min(date_t$nr_combinatii), max(date_t$nr_combinatii), by = 5),1))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]