[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cod pentru lucrare de licență",
    "section": "",
    "text": "Work in progress!\n\n\nCode\ns1 &lt;- seq(.1001, .1009, .0001)\ns2 &lt;- seq(.101, .1491, .001)\ns3 &lt;- seq(.050, .9501, .050)\ns4 &lt;- seq(1, 4)\ns &lt;- c(s1,s2,s3,s4)\n\n\n\n\nCode\nnums &lt;- sort(c(.05, sum(s), sum(s)-.05, .05+s1, s1, sum(s)-s1, sum(s)-(.05+s1), seq(.1, .2, .001), seq(.2001, sum(s)-.2001, .0001), seq(sum(s)-.2, sum(s)-.1, .001)))\n\n\n\n\nCode\ndata &lt;- data.frame(\n  numar = nums\n)\ndata$combinatii &lt;- NA\ndata$nr_comb &lt;- NA\ndata$ok &lt;- NA\n\n\n\n\nCode\n# \n# write.csv(data, \"date_02.csv\")\n\n\n\n\nCode\n# data$combinatii[1]&lt;-0\n# which(data$numar==.1000)\n\n\n\n\nCode\ngauge &lt;- function(nr){\n  comb &lt;- vector()\n\n  n1 &lt;- round(nr*10000)%%10\n\n  if(n1!=0){\n    nr &lt;- nr-s1[n1]\n    comb &lt;- c(comb, s1[n1])\n    s1 &lt;- s1[-n1]\n  }\n  \n  n2 &lt;- round(nr*1000)%%50\n  if(n2!=0){\n    nr &lt;- nr-s2[round(n2)]\n    comb &lt;- c(comb, s2[n2])\n    s2 &lt;- s2[-n2]\n  }\n\n  n3 &lt;- round((round(nr*100)%%100)/5)\n\n  \n  if(n3!=0 && n3&lt;20){\n    nr &lt;- nr-s3[n3]\n    comb&lt;-c(comb, s3[n3])\n    s3 &lt;- s3[-n3]\n  }\n  \n  if(nr&gt;=10 | 10-nr&lt;10^(-5)){\n    comb &lt;- c(comb,s4)\n    nr &lt;- nr-10\n  } else {\n    \n    for (i in seq(1,4)){\n      if(nr&gt;=s4[5-i] | s4[5-i]-nr&lt;10^(-5)){\n        nr &lt;- nr-s4[5-i]\n        comb &lt;- c(comb, s4[5-i])\n      }\n    }\n  }\n\n  if(round(nr, digits=5)==0){\n    return(comb)\n  }\n  \n  if(nr&gt;=sum(s3) | sum(s3)-nr&lt;10^(-5)){\n    comb &lt;- c(comb,s3)\n    nr &lt;- nr-sum(s3)\n  } else {\n    while(nr&gt;10^(-5) && length(s3)!=0){\n      m3 &lt;- max(which(s3&lt;=nr+10^(-5)))\n      nr &lt;- nr-s3[m3]\n      if(nr&lt;s3[1] && nr&gt;10^(-5)){\n        nr &lt;- nr+s3[m3]\n        m3 &lt;- m3-1\n        nr &lt;- nr-s3[m3]\n      }\n      comb &lt;- c(comb,s3[m3])\n      s3 &lt;- s3[-m3]\n    }\n  }\n  # if(round(nr, digits=5)==0){\n  #   return(comb)\n  # }\n  # # print(nr)\n  # if(nr&lt;.4){\n  #   k = round(.4-nr, digits=5)\n  #   nr &lt;- nr+k\n  #   comb &lt;- comb[-which(comb==k)]\n  #   while(nr&gt;10^(-5) && length(s2)!=0){\n  #     m2 &lt;- max(which(s2&lt;=nr+10^(-5)))\n  #     # print(m2)\n  #     nr &lt;- nr-s2[m2]\n  #     # print(nr)\n  #     if(any(abs(comb-nr)&lt;10^(-5))){\n  #       # print('d')\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- m2-1\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     if(nr&lt;s2[1] && nr&gt;10^(-5)){\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- min(which(s2&lt;=nr+10^(-5)))\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     # print(nr)\n  #     comb &lt;- c(comb,s2[m2])\n  #     s2 &lt;- s2[-m2]\n  #   }\n  # } else {\n  #   while(nr&gt;10^(-5) && length(s2)!=0){\n  #     m2 &lt;- max(which(s2&lt;=nr+10^(-5)))\n  #     # print(m2)\n  #     nr &lt;- nr-s2[m2]\n  #     # print(nr)\n  #     if(nr&lt;s2[1] && nr&gt;10^(-5)){\n  #       nr &lt;- nr+s2[m2]\n  #       m2 &lt;- min(which(s2&lt;=nr+10^(-5)))\n  #       nr &lt;- nr-s2[m2]\n  #     }\n  #     # print(nr)\n  #     comb &lt;- c(comb,s2[m2])\n  #     s2 &lt;- s2[-m2]\n  #   }\n  # }\n    \n  # print(nr)\n  \n  if(round(nr, digits=5)==0){\n    return(comb)\n  }\n  \n  # for (i in seq(1,19)){\n  #   if((nr&gt;=s3[20-i] | s3[20-i]-nr&lt;10^(-5)) && any(s3[20-i]==comb)==FALSE){\n  #     nr &lt;- nr-s3[20-i]\n  #     comb &lt;- c(comb, s3[20-i])\n  #   }\n  # }\n  # for (i in seq(1,24)){\n  #   if(round(nr, digits=2)&gt;=.25 && (any(s2[i]==comb)==FALSE && any(s2[50-i]==comb)==FALSE)){\n  #     nr &lt;- nr-.25\n  #     comb &lt;- c(comb, s2[i], s2[50-i])\n  #   } else if(nr&gt;0 && nr&lt;=.25){\n  #     comb &lt;- comb[!comb==round(.25-nr, digits=2)]\n  #     nr &lt;- .25\n  #   }\n  # }\n  return(comb)\n}\n\n\n\n\nCode\n# p &lt;- sort(date2$numar)\n# rownames(date2) &lt;- NULL\n\n\n\n\nCode\n# p &lt;- sort(date2$numar)\n# rownames(date2) &lt;- NULL\n\n\n\n\nCode\ndate &lt;- read.csv(\"date_01.csv\")\ndate$ok &lt;- as.factor(date$ok)\n\n\n\n\nCode\n# date2 &lt;- date[which(date$ok!=0),]\n\n\n\n\nCode\n# test &lt;- data[1:20000,]\n# for(i in seq(1, length(date3$numar))){\n#   g = gauge(date3[i,2])\n#   date3$combinatii[i] &lt;- list(g)\n#   date3$nr_combinatii[i] &lt;- length(g)\n#   date3[i, 4] &lt;- round(date3[i, 2]-sum(g), digits=4)\n# }\n\n\n\n\nCode\n# date2$ok &lt;- as.factor(date2$ok)\n# date3 &lt;- date2[which(date2$ok!=0),]\n# rownames(date3) &lt;- NULL\n\n\n\n\nCode\n# data_str &lt;- apply(data,2,as.character)\n# write.csv(data_str, \"date_01.csv\")\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nCode\nggplot(date, aes(x = numar, y = nr_combinatii, col = ok)) + \n         geom_point(size=.1) +\n         labs(title = \"Nr si cate cale e nevoie \\n - colorare după precizie -\",\n              x = \"Nr\",\n              y = \"Nr cale\")\n\n\n\n\n\n\n\nCode\ndate_t &lt;- date\ndate_t$ok[as.numeric(as.character(date_t$ok))&gt;10^(-5)] &lt;- as.factor(1)\n\nggplot(date_t, aes(x = numar, y = nr_combinatii, col = ok)) + \n         geom_point(size=.1) +\n         labs(title = \"Vizualizarea numărului necesar de cale pentru fiecare mărime \\n - colorare după precizie -\",\n              x = \"Mărimea pe care vrem să o construim\",\n              y = \"Nr. de cale necesar\") +\n        scale_x_continuous(breaks = round(seq(min(date_t$numar), max(date_t$numar), by = 2),10)) +\n        scale_y_continuous(breaks = round(seq(min(date_t$nr_combinatii), max(date_t$nr_combinatii), by = 5),1))\n\n\n\n\n\n\n\nCode\np &lt;- rnorm(10^4, 0, 0.5)\n\n\nfor(i in seq(20)){\n  q &lt;- rnorm(10^4, 0, 0.5)\n  p &lt;- p+q\n}\n\nhist(p)\n\n\n\n\n\n\n\nCode\n# datc &lt;- read.csv(\"data_complet!.csv\")\n# datc$ok[datc$ok&gt;0] &lt;- 1\n# datc$ok[datc$ok&lt;0] &lt;- -1\n# datc$ok &lt;- as.factor(datc$ok)\n# \n# datc1 &lt;- datc[which(datc$ok!=0),]\n\n\n\n\nCode\n# ggplot(datc, aes(x = numar, y = nr_comb, col = ok)) + \n#          geom_point(size=.1) +\n#          labs(title = \"Vizualizarea numărului necesar de cale pentru fiecare mărime \\n - colorare după precizie -\",\n#               x = \"Mărimea pe care vrem să o construim\",\n#               y = \"Nr. de cale necesar\") +\n#         scale_x_continuous(breaks = round(seq(min(date_t$numar), max(date_t$numar), by = 2),10)) +\n#         scale_y_continuous(breaks = round(seq(min(date_t$nr_comb), max(date_t$nr_comb), by = 5),1))\n\n\n\n\nCode\noptions(scipen=999)\n\n\nhist(p)\n\n\nCode\ng1 &lt;- numeric(10^5)\ng2 &lt;- numeric(10^5)\ng3 &lt;- numeric(10^5)\n\ncomb &lt;- c(0.128, 0.103, 0.129, 0.104, 1.0, 0.13, 0.105, 0.95, 0.131, 2.0, 0.106, 0.132, 0.9, 0.107, 3.0, 0.133, 0.85, 0.108, 0.134, 4.0, 0.8, 0.109, 0.135, 0.11, 0.75, 0.136, 0.111, 0.7, 0.137, 0.112, 0.138, 0.65, 0.113, 0.139, 0.6, 0.14, 0.55, 0.141, 0.5, 0.142, 0.45, 0.143, 0.144, 0.4, 0.119, 0.145, 0.35, 0.146, 0.3, 0.121, 0.147, 0.122, 0.25, 0.148, 0.123, 0.2, 0.149, 0.124, 0.15, 0.125, 0.1, 0.1001, 0.1002, 0.1003, 0.126, 0.1004, 0.1006, 0.1007, 0.1008, 0.1009, 0.101, 0.05, 0.127, 0.102)\ncomb1 &lt;- c(0.1001, 0.144, 0.25, 4, 1)\n\ng1 &lt;- numeric(10^5)\n\nfor(i in seq(length(comb))){\n  if(comb[i]&lt;1+10^(-5)){\n    g1 &lt;- g1 + rnorm(10^5, 0, 10^(-6))\n  } \n  if(abs(round(comb[i]-2))&lt;10^(-5)){\n    g1 &lt;- g1 + rnorm(10^5, 0, 2*10^(-6))\n  }\n  if(abs(round(comb[i]-3))&lt;10^(-5)){\n    g1 &lt;- g1 + rnorm(10^5, 0, (2.5)*10^(-6))\n  }\n  if(abs(round(comb[i]-4))&lt;10^(-5)){\n    g1 &lt;- g1 + rnorm(10^5, 0, 3*10^(-6))\n  }\n}\n\ng2 &lt;- numeric(10^5)\n\nfor(i in seq(length(comb))){\n  if(comb[i]&lt;1+10^(-5)){\n    g2 &lt;- g2 + rnorm(10^5, 0.000001, 1.5*10^(-6))\n  } \n  if(abs(round(comb[i]-2))&lt;10^(-5)){\n    g2 &lt;- g2 + rnorm(10^5, 0.000002, 3*10^(-6))\n  }\n  if(abs(round(comb[i]-3))&lt;10^(-5)){\n    g2 &lt;- g2 + rnorm(10^5, 0.0000025, (3.75)*10^(-6))\n  }\n  if(abs(round(comb[i]-4))&lt;10^(-5)){\n    g2 &lt;- g2 + rnorm(10^5, 0.000003, (4.5)*10^(-6))\n  }\n}\n\ng3 &lt;- numeric(10^5)\n\nfor(i in seq(length(comb))){\n  if(comb[i]&lt;1+10^(-5)){\n    g3 &lt;- g3 + rnorm(10^5, 0.000002, 3*10^(-6))\n  } \n  if(abs(round(comb[i]-2))&lt;10^(-5)){\n    g3 &lt;- g3 + rnorm(10^5, 0.000004, 6*10^(-6))\n  }\n  if(abs(round(comb[i]-3))&lt;10^(-5)){\n    g3 &lt;- g3 + rnorm(10^5, 0.000005, (7.5)*10^(-6))\n  }\n  if(abs(round(comb[i]-4))&lt;10^(-5)){\n    g3 &lt;- g3 + rnorm(10^5, 0.000006, (9)*10^(-6))\n  }\n}\n\ncat(\"\\n\")\n\n\nCode\nhist(g1, xlab = \"Abatere față de valoarea nominală\", main=\"Distribuția incertitudinii pentru cale de Grad 1\", breaks=100)\n\n\n\n\n\nCode\nsd_g1 = sd(g1)\ncat(\"Media combinației folosind g1 este 0 iar deviația standard este \", round(sd_g1, digits=7),\".\\n\")\n\n\nMedia combinației folosind g1 este 0 iar deviația standard este  0.0000095 .\n\n\nCode\ncat(\"Combinația cu calele g1 oferă cu 95% încredere toleranța [\",round(-2*sd_g1, digits=6), \", \", round(2*sd_g1, digits=6),\"]\\n\")\n\n\nCombinația cu calele g1 oferă cu 95% încredere toleranța [ -0.000019 ,  0.000019 ]\n\n\nCode\ncat(\"\\n\")\n\n\nCode\nhist(g2, xlab = \"Abatere față de valoarea nominală\", main=\"Distribuția incertitudinii pentru cale de Grad 2\",  breaks=100)\n\n\n\n\n\nCode\nsd_g2 = sd(g2)\nmean_g2 = mean(g2)\ncat(\"Media combinației folosind g2 este \",round(mean_g2, digits=7), \" iar deviația standard este \", round(sd_g2, digits=7),\".\\n\")\n\n\nMedia combinației folosind g2 este  0.0000784  iar deviația standard este  0.0000142 .\n\n\nCode\ncat(\"Combinația cu calele g2 oferă cu 95% încredere toleranța [\",round(mean_g2-2*sd_g2, digits=6), \", \", round(mean_g2+2*sd_g2, digits=6), \"]\\n\")\n\n\nCombinația cu calele g2 oferă cu 95% încredere toleranța [ 0.00005 ,  0.000107 ]\n\n\nCode\ncat(\"\\n\")\n\n\nCode\nhist(g3, xlab = \"Abatere față de valoarea nominală\", main=\"Distribuția incertitudinii pentru cale de Grad 3\", breaks=100)\n\n\n\n\n\nCode\nsd_g3 = sd(g3)\nmean_g3 = mean(g3)\ncat(\"Media combinației folosind g3 este \",round(mean_g3, digits=7), \" iar deviația standard este \", round(sd_g3, digits=7),\".\\n\")\n\n\nMedia combinației folosind g3 este  0.0001569  iar deviația standard este  0.0000285 .\n\n\nCode\ncat(\"Combinația cu calele g3 oferă cu 95% încredere toleranța [\",round(mean_g3-2*sd_g3, digits=6), \", \", round(mean_g3+2*sd_g3, digits=6), \"]\\n\")\n\n\nCombinația cu calele g3 oferă cu 95% încredere toleranța [ 0.0001 ,  0.000214 ]\n\n\n\n\nCode\nfor(i in seq(length(comb1))){\n  if(comb1[i]&lt;1){\n    p &lt;- c(p, rnorm(10^5, 0, 1/2))\n  } else{\n    p &lt;- c(p, rnorm(10^5, 0, comb1[i]/2))\n  }\n}\n\n\nhist(p, freq = TRUE, breaks=150)\n\n\n\n\n\nCode\nprint(sd(p))\n\n\n[1] 1.039171"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "GaugeBlock Finder",
    "section": "",
    "text": "Enter a number and see if you can obtain it with gauges from an 81 Ford-Johansson gauge block set.\nPlease take into consideration the following:\n\nNumbers from 0.1 - 26.4295 range can be obtained\nFrom 0.1 - 0.2 numbers can be obtained with increment of 0.001\nFrom 0.2 - 26.3295 numbers can be obtained with increment of 0.0001\nFrom 26.3295 - 26.4295 numbers can be obtained with increment of 0.001\nBesides that, you can obtain 0 by not using anything, 26.5295 by using all the blocks and 0.05 by using the block 0.05\n\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\noptions(scipen=999)\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/VladMarianciuc/gauge-block-study/main/cleaned2.csv\")\n\n\n\n# Define the table data\ntable_data &lt;- data.frame(\n  Nominal = c(\"&lt;1 inch\", \"2\", \"3\", \"4\"),\n  Grade_0.5 = c(\"+1, -1\", \"+2, -2\", \"+3, -3\", \"+4, -4\"),\n  Grade_1 = c(\"+2, -2\", \"+4, -4\", \"+5, -5\", \"+6, -6\"),\n  Grade_2 = c(\"+4, -2\", \"+8, -4\", \"+10, -5\", \"+12, -6\"),\n  Grade_3 = c(\"+8, -4\", \"+16, -8\", \"+20, -10\", \"+24, -12\")\n)\n\n# Define UI\nui &lt;- fluidPage(\n  titlePanel(\"GaugeBlock Finder\"),\n  HTML('&lt;p&gt;Tolerance Grades for Inch Blocks (in µin ). (&lt;a href=\"https://www.nist.gov/system/files/documents/calibrations/mono180.pdf\" target=\"_blank\"&gt;source&lt;/a&gt;)&lt;/p&gt;'),\n  DTOutput(\"grade_table\"),  # Add a DT output for the table\n  br(),  # Add an empty row after the table\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"numar_input\", \"Enter a floating number (up to 4 decimals):\", value = \"0.0000\"),\n      selectInput(\"grade\", \"Select a tolerance grade:\", choices = c(\"0.5\", \"1\", \"2\", \"3\")),\n      actionButton(\"submit\", \"Submit\")\n    ),\n    mainPanel(\n      textOutput(\"result_text\"),\n      textOutput(\"result_combination\"),\n      htmlOutput(\"result_gauge_blocks\"),\n      plotOutput(\"histogram\"),  # Add a plot output for the histogram\n      br(),  # Add an empty row after the histogram\n      textOutput(\"result_stats\")  # Add a text output for the statistics\n    )\n  )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  submit_data &lt;- eventReactive(input$submit, {\n    numar &lt;- as.numeric(input$numar_input)\n    grade &lt;- input$grade\n    list(numar = numar, grade = grade)\n  })\n  \n  filteredData &lt;- reactive({\n    req(submit_data())\n    numar &lt;- submit_data()$numar\n    df &lt;- data[data$numar == numar, c(\"combinatii\", \"nr_comb\")]\n    if (nrow(df) == 0) {\n      return(NULL)\n    } else {\n      return(df)\n    }\n  })\n  \n  output$grade_table &lt;- renderDT({\n    datatable(table_data, options = list(dom = 't', paging = FALSE, searching = FALSE), rownames = FALSE)\n  })\n  \n  output$result_text &lt;- renderText({\n    req(submit_data())\n    if (is.null(filteredData())) {\n      return(\"Number is not in the obtainable range\")\n    } else {\n      return(\"The number can be obtained with this combination:\")\n    }\n  })\n  \n  output$result_combination &lt;- renderText({\n    req(submit_data(), filteredData())\n    combinatii_str &lt;- gsub(\"\\\\[|\\\\]\", \"\", filteredData()$combinatii[1])\n    combinatii_vec &lt;- sort(as.numeric(unlist(strsplit(combinatii_str, \", \"))))\n    paste(combinatii_vec, collapse = \", \")\n  })\n  \n  output$result_gauge_blocks &lt;- renderUI({\n    req(submit_data(), filteredData())\n    HTML(paste(\"&lt;br&gt;The above combination uses &lt;strong&gt;\", filteredData()$nr_comb[1], \"&lt;/strong&gt; gauge blocks\"))\n  })\n  \n  g1_data &lt;- reactive({\n    req(filteredData())\n    combinatii_str &lt;- gsub(\"\\\\[|\\\\]\", \"\", filteredData()$combinatii[1])\n    combinatii_vec &lt;- as.numeric(unlist(strsplit(combinatii_str, \", \")))\n    g1 &lt;- numeric(10^5)\n    \n    if(submit_data()$grade == \"0.5\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 0.5*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, (1.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 2*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"1\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 2*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, (2.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 3*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"2\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000001, 1.5*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000002, 3*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.0000025, (3.75)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000003, (4.5)*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"3\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000002, 3*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000004, 6*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000005, (7.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000006, (9)*10^(-6))\n        }\n      }\n    }\n    g1\n  })\n  \n  output$histogram &lt;- renderPlot({\n    g1 &lt;- g1_data()\n    hist(g1, xlab = \"Deviation from nominal value (in inches)\", main = \"Deviation distribution for this combination\", breaks = 100)\n  })\n  \n  output$result_stats &lt;- renderText({\n    g1 &lt;- g1_data()\n    mean_g1 &lt;- mean(g1)\n    sd_g1 &lt;- sd(g1)\n    conf_tol &lt;- round(mean_g1 + 2 * sd_g1, digits = 6)\n    conf_tol_neg &lt;- round(mean_g1 - 2 * sd_g1, digits = 6)\n    \n    paste(\"The tolerance of this combination is with 95% confidence +\", conf_tol*10^6, \" / \", conf_tol_neg*10^6, \" µin  (or \", conf_tol, \" / \", conf_tol_neg, \" inches).\")\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "about.ro.html",
    "href": "about.ro.html",
    "title": "Aplic",
    "section": "",
    "text": "Despre acest site\n\n1+1\n\n[1] 2"
  },
  {
    "objectID": "gaugefinder.html",
    "href": "gaugefinder.html",
    "title": "GaugeBlock Finder",
    "section": "",
    "text": "Enter a number and chose a tolerance grade and see if you can obtain it with gauges from an 81 Ford-Johansson gauge block set. You will also get the tolerance interval of the specific combination that matches your chosen number.\nPlease take into consideration the following:\n\nNumbers from 0.1 - 26.4295 range can be obtained\nFrom 0.1 - 0.2 numbers can be obtained with increment of 0.001\nFrom 0.2 - 26.3295 numbers can be obtained with increment of 0.0001\nFrom 26.3295 - 26.4295 numbers can be obtained with increment of 0.001\nBesides that, you can obtain 0 by not using anything, 26.5295 by using all the blocks and 0.05 by using the block 0.05\n\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\noptions(scipen=999)\n\ndata &lt;- read.csv(\"https://raw.githubusercontent.com/VladMarianciuc/gauge-block-study/main/cleaned2.csv\")\n\n\n\n# Define the table data\ntable_data &lt;- data.frame(\n  Nominal = c(\"&lt;1 inch\", \"2\", \"3\", \"4\"),\n  Grade_0.5 = c(\"+1, -1\", \"+2, -2\", \"+3, -3\", \"+4, -4\"),\n  Grade_1 = c(\"+2, -2\", \"+4, -4\", \"+5, -5\", \"+6, -6\"),\n  Grade_2 = c(\"+4, -2\", \"+8, -4\", \"+10, -5\", \"+12, -6\"),\n  Grade_3 = c(\"+8, -4\", \"+16, -8\", \"+20, -10\", \"+24, -12\")\n)\n\n# Define UI\nui &lt;- fluidPage(\n  titlePanel(\"GaugeBlock Finder\"),\n  HTML('&lt;p&gt;Tolerance Grades for Inch Blocks (in µin ). (&lt;a href=\"https://www.nist.gov/system/files/documents/calibrations/mono180.pdf\" target=\"_blank\"&gt;source&lt;/a&gt;)&lt;/p&gt;'),\n  DTOutput(\"grade_table\"),  # Add a DT output for the table\n  br(),  # Add an empty row after the table\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"numar_input\", \"Enter a floating number (up to 4 decimals):\", value = \"0.0000\"),\n      selectInput(\"grade\", \"Select a tolerance grade:\", choices = c(\"0.5\", \"1\", \"2\", \"3\")),\n      actionButton(\"submit\", \"Submit\")\n    ),\n    mainPanel(\n      textOutput(\"result_text\"),\n      textOutput(\"result_combination\"),\n      htmlOutput(\"result_gauge_blocks\"),\n      plotOutput(\"histogram\"),  # Add a plot output for the histogram\n      br(),  # Add an empty row after the histogram\n      textOutput(\"result_stats\")  # Add a text output for the statistics\n    )\n  )\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  submit_data &lt;- eventReactive(input$submit, {\n    numar &lt;- as.numeric(input$numar_input)\n    grade &lt;- input$grade\n    list(numar = numar, grade = grade)\n  })\n  \n  filteredData &lt;- reactive({\n    req(submit_data())\n    numar &lt;- submit_data()$numar\n    df &lt;- data[data$numar == numar, c(\"combinatii\", \"nr_comb\")]\n    if (nrow(df) == 0) {\n      return(NULL)\n    } else {\n      return(df)\n    }\n  })\n  \n  output$grade_table &lt;- renderDT({\n    datatable(table_data, options = list(dom = 't', paging = FALSE, searching = FALSE), rownames = FALSE)\n  })\n  \n  output$result_text &lt;- renderText({\n    req(submit_data())\n    if (is.null(filteredData())) {\n      return(\"Number is not in the obtainable range\")\n    } else {\n      return(\"The number can be obtained with the following combination of gauge blocks\")\n    }\n  })\n  \n  output$result_combination &lt;- renderText({\n    req(submit_data(), filteredData())\n    combinatii_str &lt;- gsub(\"\\\\[|\\\\]\", \"\", filteredData()$combinatii[1])\n    combinatii_vec &lt;- sort(as.numeric(unlist(strsplit(combinatii_str, \", \"))))\n    paste(combinatii_vec, collapse = \", \")\n  })\n  \n  output$result_gauge_blocks &lt;- renderUI({\n    req(submit_data(), filteredData())\n    HTML(paste(\"&lt;br&gt;The above combination uses &lt;strong&gt;\", filteredData()$nr_comb[1], \"&lt;/strong&gt; gauge blocks\"))\n  })\n  \n  g1_data &lt;- reactive({\n    req(filteredData())\n    combinatii_str &lt;- gsub(\"\\\\[|\\\\]\", \"\", filteredData()$combinatii[1])\n    combinatii_vec &lt;- as.numeric(unlist(strsplit(combinatii_str, \", \")))\n    g1 &lt;- numeric(10^5)\n    \n    if(submit_data()$grade == \"0.5\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 0.5*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, (1.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 2*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"1\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 2*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, (2.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0, 3*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"2\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000001, 1.5*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000002, 3*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.0000025, (3.75)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000003, (4.5)*10^(-6))\n        }\n      }\n    }\n    if(submit_data()$grade == \"3\"){\n      for(item in combinatii_vec){\n        if(item&lt;1+10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000002, 3*10^(-6))\n        } \n        if(abs(round(item-2))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000004, 6*10^(-6))\n        }\n        if(abs(round(item-3))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000005, (7.5)*10^(-6))\n        }\n        if(abs(round(item-4))&lt;10^(-5)){\n          g1 &lt;- g1 + rnorm(10^5, 0.000006, (9)*10^(-6))\n        }\n      }\n    }\n    g1\n  })\n  \n  output$histogram &lt;- renderPlot({\n    g1 &lt;- g1_data()\n    hist(g1, xlab = \"Deviation from nominal value (in inches)\", main = \"Deviation distribution for this combination\", breaks = 100)\n  })\n  \n  output$result_stats &lt;- renderText({\n    g1 &lt;- g1_data()\n    mean_g1 &lt;- mean(g1)\n    sd_g1 &lt;- sd(g1)\n    conf_tol &lt;- round(mean_g1 + 2 * sd_g1, digits = 6)\n    conf_tol_neg &lt;- round(mean_g1 - 2 * sd_g1, digits = 6)\n    \n    paste(\"The tolerance of this combination is with 95% confidence +\", conf_tol*10^6, \" / \", conf_tol_neg*10^6, \" µin  (or \", conf_tol, \" / \", conf_tol_neg, \" inches).\")\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  }
]